#!/usr/bin/env python3
"""Print word count for a LaTeX project.

Specify a .tex file or use a .texwc config file to specify multiple files. Use
--init to create a config file. By default, \\input and \\include commands are
ignored. Use --with-includes to expand them.
"""

import argparse
import json
import os
import subprocess
import sys

TEX_EXT = ".tex"
CONFIG_EXT = ".texwc"
IGNORE_ENVS = ["array", "eqnearray", "equation", "figure", "mathmatica",
               "picture", "table", "verbatim", "lstlisting", "sidewaystable"]
DEFAULT_DETEX_OPTS = ["-l", "-n"]


class Colours():
    BOLD = '\033[1m'
    WARN = '\033[93m'
    ERR = '\033[91m'
    GREEN = '\033[92m'
    ENDC = '\033[0m'


class Config:
    def __init__(self, path, plain=False, print_text=False, init=False,
                 recursive=False, includes=False):
        self.path = path
        self.plain = plain
        self.print_text = print_text
        self.init = init
        self.recursive = recursive
        self.includes = includes
        self.files = []
        self.detex_opts = DEFAULT_DETEX_OPTS


def _die(config, msg):
    msg = "Error: {}".format(msg)
    if not config.plain:
        msg = Colours.ERR + msg + Colours.ENDC
    print(msg, file=sys.stderr)
    exit(1)


def _warn(config, msg):
    msg = "Warning: {}".format(msg)
    if not config.plain:
        msg = Colours.WARN + msg + Colours.ENDC
    print(msg, file=sys.stderr)


def _detex_cmd(config, path):
    envs_str = ",".join(IGNORE_ENVS)
    cmd = ["detex", "-e", envs_str]
    cmd += config.detex_opts
    if config.includes and "-n" in cmd:
        cmd.remove("-n")
    cmd.append(path)
    return cmd


def _count_words(config, path):
    try:
        detex = subprocess.Popen(_detex_cmd(config, path),
                                 stdout=subprocess.PIPE)
        wc = subprocess.check_output(['wc'], stdin=detex.stdout)
        return [int(x) for x in wc.split()[0:3]]
    except OSError as e:
        if e.errno == os.errno.ENOENT:
            _die(config, "Detex not installed.")
        else:
            raise


def _print_words(config, path, f_name):
    try:
        if not config.plain:
            print("{0}Contents of {1}:{2}".format(
                Colours.GREEN + Colours.BOLD, f_name, Colours.ENDC))
        else:
            print("Contents of {}:".format(f_name))
        detex = subprocess.check_output(_detex_cmd(config, path))
        print(detex.decode('utf-8', 'backslashreplace'))
    except OSError as e:
        if e.errno == os.errno.ENOENT:
            _die(config, "Detex not installed.")
        else:
            raise


def _print_result_row(config, row, padding, colour=None):
    if config.plain or not colour:
        print("{{0:>{0}}} {{1:>{1}}} {{2:>{2}}} {{3:<{3}}}".format(
            *padding).format(*row))
    else:
        print("{0}{{0:>{1}}} {{1:>{2}}} {{2:>{3}}} {{3:<{4}}}{5}".format(
            colour, *padding, Colours.ENDC).format(*row))


def _print_results(config, rows):
    if config.print_text:
        return
    total = [0, 0, 0, "TOTAL"]
    padding = [0, 0, 0, 0]
    for count in rows:
        total[:-1] = [x + y for x, y in zip(total[:-1], count[:-1])]
    header = ["LINES", "WORDS", "CHARS", "FILE"]
    rows = [header] + rows + [total] if len(rows) > 1 else [header] + rows
    for row in rows:
        padding = [max(x, len(str(y))) for x, y in zip(padding, row)]
    for r, row in enumerate(rows):
        if r == 0:
            _print_result_row(config, row, padding, Colours.BOLD)
        elif r == len(rows) - 1:
            _print_result_row(config, row, padding, Colours.GREEN)
        else:
            _print_result_row(config, row, padding)


def _load_config_file(config, path):
    with open(path) as index_file:
        obj = json.load(index_file)
        index = []
        if "files" not in obj or not obj["files"]:
            _die(config, "Invalid config file (no \"files\" specified).")
        for f_path in obj["files"]:
            if f_path.endswith(TEX_EXT):
                f_path = os.path.splitext(f_path)[0]
            index.append(f_path)
        config.index = index
        if "detex-options" in obj:
            config.detex_opts = obj["detex-options"]


def _config_paths(config):
    path = config.path
    if path.endswith(TEX_EXT):  # Word count on a single .tex file
        if not os.path.isfile(path):
            _die(config, "No .tex file with that name.")
        config.path = os.path.dirname(path)
        f_name = os.path.splitext(os.path.basename(path))[0]
        config.index = [f_name]
    else:  # Word count on index from a .texwc file
        if path.endswith(CONFIG_EXT):
            if not os.path.isfile(path):
                _die(config, "No .texwc config file with that name.")
            _load_config_file(config, path)
            config.path = os.path.dirname(path)
        else:  # Root directory specified
            if not os.path.isdir(path):
                _die(config, "No directory with that name.")
            if CONFIG_EXT not in os.listdir(path):
                _die(config, "No index file found in this directory.")
            config_path = os.path.join(path, CONFIG_EXT)
            _load_config_file(config, config_path)


def _confirm(msg, default_yes=True):
    if default_yes:
        msg += " (Y/n) "
    else:
        msg += " (y/N) "
    print(msg, end='')
    inp = input()
    return inp in ['y', 'Y'] or (default_yes and inp not in ['n', 'N'])


def _get_tex_files_in_dir(path, recursive):
    index = []
    for f in os.listdir(path):
        f_path = os.path.join(path, f)
        if f.endswith(TEX_EXT):
            index.append(f)
        elif recursive and os.path.isdir(f_path):
            sd_files = _get_tex_files_in_dir(f_path, recursive)
            index += [os.path.join(f, x) for x in sd_files]
    return sorted(index)


def _config_json(config, index):
    detex_opts = DEFAULT_DETEX_OPTS
    if config.includes:
        detex_opts.remove("-n")
    return {
        "detex-options": detex_opts,
        "files": index
    }


def _init(config):
    path = config.path
    if not os.path.isdir(path):
        _die(config, "No directory with that name.")
    index = _get_tex_files_in_dir(path, config.recursive)
    if not index:
        _die(config, "No .tex files found in this directory.")
    print("Initialising .texwc with {} .tex files...".format(len(index)))
    config_path = os.path.join(path, CONFIG_EXT)
    if os.path.exists(config_path):
        if not _confirm("Config file already exists. Overwrite?",
                        default_yes=False):
            exit(0)
    with open(config_path, 'w') as f:
        json.dump(_config_json(config, index), f, indent=4)


def texwc(config):
    if config.init:
        _init(config)
    _config_paths(config)
    if config.path:
        os.chdir(config.path)
    counts = []
    for f_name in config.index:
        f_path = f_name + TEX_EXT
        if not os.path.isfile(f_path):
            msg = "No file named {} found.".format(f_path)
            _warn(config, msg)
        else:
            if config.print_text:
                _print_words(config, f_path, f_name)
            else:
                counts.append(_count_words(config, f_path) + [f_name])
    _print_results(config, counts)


def parse_arguments():
    parser = argparse.ArgumentParser(
        description=__doc__,
        usage="%(prog)s [-h] [path] [options]"
    )
    parser.add_argument(
        'path',
        type=str,
        nargs='?',
        default=os.getcwd(),
        help="path of a .tex file, a .texwc config file, or a root directory"
    )
    parser.add_argument(
        '-i', '--init',
        action='store_true',
        help="initialise directory with a default config file"
    )
    parser.add_argument(
        '-r', '--recursive',
        action='store_true',
        help="recursively add .tex files in subdirectories to config file"
    )
    parser.add_argument(
        '-w', '--with-includes',
        action='store_true',
        help="expand \\input and \\include commands"
    )
    parser.add_argument(
        '-p', '--print-text',
        action='store_true',
        help="print output of detex instead of word count"
    )
    parser.add_argument(
        '--plain',
        action='store_true',
        help="turn off colour output"
    )
    args = parser.parse_args()
    return Config(args.path, plain=args.plain, print_text=args.print_text,
                  init=args.init, recursive=args.recursive,
                  includes=args.with_includes)


if __name__ == '__main__':
    texwc(parse_arguments())
