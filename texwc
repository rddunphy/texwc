#!/usr/bin/env python3
"""Print word count for a LaTeX project.

Specify files to be included in the count as a list of relative file paths in
an index file in your project root directory. Each path should be placed on a
new line.
"""

import argparse
import os
import subprocess
import sys

TEX_EXT = ".tex"
INDEX_NAME = ".texwc"
IGNORE_ENVS = "array,eqnearray,equation,figure,mathmatica,picture,table,\
verbatim,lstlisting,sidewaystable"


class Colours:
    BOLD = '\033[1m'
    WARN = '\033[93m'
    ERR = '\033[91m'
    GREEN = '\033[92m'
    ENDC = '\033[0m'


class Config:
    def __init__(self, args):
        self.path = args.path
        self.plain = args.plain


def _die(config, msg):
    msg = "Error: {}".format(msg)
    if not config.plain:
        msg = Colours.ERR + msg + Colours.ENDC
    print(msg, file=sys.stderr)
    exit(1)


def _warn(config, msg):
    msg = "Warning: {}".format(msg)
    if not config.plain:
        msg = Colours.WARN + msg + Colours.ENDC
    print(msg, file=sys.stderr)


def _count_words(config, path):
    try:
        detex = subprocess.Popen(['detex', '-lne', IGNORE_ENVS, path],
                                 stdout=subprocess.PIPE)
        wc = subprocess.check_output(['wc'], stdin=detex.stdout)
        return [int(x) for x in wc.split()[0:3]]
    except OSError as e:
        if e.errno == os.errno.ENOENT:
            _die(config, "Detex not installed.")
        else:
            raise


def _print_result_row(config, row, padding, colour=None):
    if config.plain or not colour:
        print("{{0:>{0}}} {{1:>{1}}} {{2:>{2}}} {{3:<{3}}}".format(
            *padding).format(*row))
    else:
        print("{0}{{0:>{1}}} {{1:>{2}}} {{2:>{3}}} {{3:<{4}}}{5}".format(
            colour, *padding, Colours.ENDC).format(*row))


def _print_results(config, rows):
    total = [0, 0, 0, "TOTAL"]
    padding = [0, 0, 0, 0]
    for count in rows:
        total[:-1] = [x + y for x, y in zip(total[:-1], count[:-1])]
    header = ["LINES", "WORDS", "CHARS", "FILE"]
    rows = [header] + rows + [total]
    for row in rows:
        padding = [max(x, len(str(y))) for x, y in zip(padding, row)]
    for r, row in enumerate(rows):
        if r == 0:
            _print_result_row(config, row, padding, Colours.BOLD)
        elif r == len(rows) - 1:
            _print_result_row(config, row, padding, Colours.GREEN)
        else:
            _print_result_row(config, row, padding)


def texwc(config):
    path = config.path
    if not os.path.isdir(path):
        _die(config, "Please specify a root directory.")
    if INDEX_NAME not in os.listdir(path):
        _die(config, "No index file found in that directory.")
    with open(os.path.join(path, INDEX_NAME)) as index:
        counts = []
        for f_name in index.readlines():
            f_name = f_name.strip()
            f_path = os.path.join(path, f_name + TEX_EXT)
            if not os.path.isfile(f_path):
                msg = "No file named {} found.".format(f_name + TEX_EXT)
                _warn(config, msg)
            else:
                counts.append(_count_words(config, f_path) + [f_name])
        _print_results(config, counts)


def parse_arguments():
    parser = argparse.ArgumentParser(
        description=__doc__,
        usage="%(prog)s [-h] [path] [options]"
    )
    parser.add_argument(
        'path',
        type=str,
        nargs='?',
        default=os.getcwd(),
        help="Root directory"
    )
    parser.add_argument(
        '--plain',
        action='store_true',
        help="Turn off colour output"
    )
    args = parser.parse_args()
    return Config(args)


if __name__ == '__main__':
    texwc(parse_arguments())
