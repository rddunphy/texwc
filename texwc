#!/usr/bin/env python3
"""Print word count for a LaTeX project.

Specify files to be included in the count as a list of relative file paths in
an index file in your project root directory. Each path should be placed on a
new line.
"""

import argparse
import json
import os
import subprocess
import sys

TEX_EXT = ".tex"
CONFIG_EXT = ".texwc"
IGNORE_ENVS = "array,eqnearray,equation,figure,mathmatica,picture,table,\
verbatim,lstlisting,sidewaystable"


class Colours:
    BOLD = '\033[1m'
    WARN = '\033[93m'
    ERR = '\033[91m'
    GREEN = '\033[92m'
    ENDC = '\033[0m'


class Config:
    def __init__(self, path, plain=True):
        self.path = path
        self.plain = plain


def _die(config, msg):
    msg = "Error: {}".format(msg)
    if not config.plain:
        msg = Colours.ERR + msg + Colours.ENDC
    print(msg, file=sys.stderr)
    exit(1)


def _warn(config, msg):
    msg = "Warning: {}".format(msg)
    if not config.plain:
        msg = Colours.WARN + msg + Colours.ENDC
    print(msg, file=sys.stderr)


def _count_words(config, path):
    try:
        detex = subprocess.Popen(['detex', '-lne', IGNORE_ENVS, path],
                                 stdout=subprocess.PIPE)
        wc = subprocess.check_output(['wc'], stdin=detex.stdout)
        return [int(x) for x in wc.split()[0:3]]
    except OSError as e:
        if e.errno == os.errno.ENOENT:
            _die(config, "Detex not installed.")
        else:
            raise


def _print_result_row(config, row, padding, colour=None):
    if config.plain or not colour:
        print("{{0:>{0}}} {{1:>{1}}} {{2:>{2}}} {{3:<{3}}}".format(
            *padding).format(*row))
    else:
        print("{0}{{0:>{1}}} {{1:>{2}}} {{2:>{3}}} {{3:<{4}}}{5}".format(
            colour, *padding, Colours.ENDC).format(*row))


def _print_results(config, rows):
    total = [0, 0, 0, "TOTAL"]
    padding = [0, 0, 0, 0]
    for count in rows:
        total[:-1] = [x + y for x, y in zip(total[:-1], count[:-1])]
    header = ["LINES", "WORDS", "CHARS", "FILE"]
    rows = [header] + rows + [total] if len(rows) > 1 else [header] + rows
    for row in rows:
        padding = [max(x, len(str(y))) for x, y in zip(padding, row)]
    for r, row in enumerate(rows):
        if r == 0:
            _print_result_row(config, row, padding, Colours.BOLD)
        elif r == len(rows) - 1:
            _print_result_row(config, row, padding, Colours.GREEN)
        else:
            _print_result_row(config, row, padding)


def _load_config_file(config, path):
    with open(path) as index_file:
        obj = json.load(index_file)
        index = []
        for f_path in obj["files"]:
            if f_path.endswith(TEX_EXT):
                f_path = os.path.splitext(f_path)[0]
            index.append(f_path)
        config.index = index


def _config_paths(config):
    path = config.path
    if path.endswith(TEX_EXT):  # Word count on a single .tex file
        if not os.path.isfile(path):
            _die(config, "No .tex file with that name.")
        config.path = os.path.dirname(path)
        f_name = os.path.splitext(os.path.basename(path))[0]
        config.index = [f_name]
    else:  # Word count on index from a .texwc file
        if path.endswith(CONFIG_EXT):
            if not os.path.isfile(path):
                _die(config, "No .texwc config file with that name.")
            _load_config_file(config, path)
            config.path = os.path.dirname(path)
        else:  # Root directory specified
            if not os.path.isdir(path):
                _die(config, "No directory with that name.")
            if CONFIG_EXT not in os.listdir(path):
                _die(config, "No index file found in this directory.")
            index_path = os.path.join(path, CONFIG_EXT)
            _load_config_file(config, index_path)


def texwc(config):
    _config_paths(config)
    counts = []
    for f_name in config.index:
        f_path = os.path.join(config.path, f_name + TEX_EXT)
        if not os.path.isfile(f_path):
            msg = "No file named {} found.".format(f_name + TEX_EXT)
            _warn(config, msg)
        else:
            counts.append(_count_words(config, f_path) + [f_name])
    _print_results(config, counts)


def parse_arguments():
    parser = argparse.ArgumentParser(
        description=__doc__,
        usage="%(prog)s [-h] [path] [options]"
    )
    parser.add_argument(
        'path',
        type=str,
        nargs='?',
        default=os.getcwd(),
        help="Root directory or config file path"
    )
    parser.add_argument(
        '--plain',
        action='store_true',
        help="Turn off colour output"
    )
    args = parser.parse_args()
    return Config(args.path, plain=args.plain)


if __name__ == '__main__':
    texwc(parse_arguments())
